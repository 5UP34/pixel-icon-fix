import flixel.FlxG;
import funkin.Paths;
import funkin.play.PlayState;

import funkin.modding.module.Module;

/**
 * TODO: After redoing the chart format, add a ScriptedSong class,
 * make this extend that, and have the constructor call `super('milf')`.
 */
class MILFGameplayModule extends Module
{
	public function new() {
		super('vanilla-gameplay-milf');
	}

	/**
	 * Health lost when hit by lamp.
	 */ 
	var HEALTH_LOSS = 0.25 * 2;

	/**
	 * Start the animation # steps before the impact sound and dodge animation play.
	 */
	var WINDUP_TIME = 1;

	/*
	 * The step numbers at which the lamp passes by.
	 */
	var LAMP_TIMES = [
		8, // Beginning of the song for testing.
		225, // First hold note, during second BF segment.
		1050 // The proper part of the song to do the hold note. 80 seconds into the song is annoying to test so we're testing earlier.
	];

	public function isCorrectSong() {
		if (PlayState.currentSong == null)
			return false;


		return PlayState.currentSong.song.toLowerCase() == "milf"
			// Uncomment this line to only enable the feature on Hard!	
			&& PlayState.storyDifficulty == 2;
	}

	/**
	 * Returns true if the player is currently holding the 
	 */
	public function isPlayerDucking() {
		// If this returns false, the player will be hit by the light.

		// If the player hits the start of the hold note, and continues to hold it, they will dodge.
		// If the player hits the start of the hold note, but stops holding it, and isn't holding it at the right time, they won't dodge.

		// What if the player misses the start of the hold note, then starts holding it halfway through and is holding it at the right time?
		// What if the player hits the start of the hold note, releases for a bit, then presses it again and is holding it at the right time?

		// Right now we just assume if they're holding down at the right time, it counts.
		return PlayState.instance.controls.NOTE_DOWN;
	}

	var nextLampIndex = 0;

	public function onStepHit(event:SongTimeScriptEvent) {
		super.onStepHit(event);

		if (isCorrectSong()) {
			var NEXT_LAMP_TIME = LAMP_TIMES[nextLampIndex];

			if (event.step == NEXT_LAMP_TIME) {
				doLampHit();

				nextLampIndex++;
			} else if (event.step == NEXT_LAMP_TIME - WINDUP_TIME) {
				playLampAnim();
			}
		}
	}
	
	/**
	 * Make the lamp move across the screen.
	 */
	public function playLampAnim() {
		resetLamp();
		
		var lamp = PlayState.instance.currentStage.getNamedProp('highwayLight');
		lamp.velocity.x = 300 / FlxG.elapsed;

		// We could add some code to make it stop but nobody cares.
	}

	/**
	 * Resets the lamp's position to the far left, and makes it stop moving.
	 */
	public function resetLamp() {
		var lamp = PlayState.instance.currentStage.getNamedProp('highwayLight');

		if (lamp == null)
			return;

		// Set active to true so position is calculated based on velocity.
		lamp.active = true;

		// Reset the position.
		lamp.x = -1000;
		lamp.y = 200;
		lamp.velocity.x = 0;
	}

	/**
	 * Check whether the player hit or dodged the lamp, and play the appropriate sound.
	 * Also plays an animation and lowers the player's health.
	 */
	public function doLampHit() {
		trace("LAMP TIME!");

		if (isPlayerDucking()) {
			trace("Player dodged!");
			FlxG.sound.play(Paths.soundRandom('Light_Pass_Head_', 1, 4), 1.0);

			trace(PlayState.instance.currentStage.getBoyfriend().animation.getNameList());
			PlayState.instance.currentStage.getBoyfriend().playAnimation('dodge', true, true);
		} else {
			trace("Player hit!");
			FlxG.sound.play(Paths.sound('BF_Hit_by_Passing_Light'), 1.0);

			// Lose health when hit.
			PlayState.instance.health -= HEALTH_LOSS;

			// Play the miss animation.
			// PlayState.instance.currentStage.getBoyfriend().playAnimation('singDOWNmiss', true);
			PlayState.instance.currentStage.getBoyfriend().playAnimation('dodge', true, true);
		}
	}

	/**
	 * Make sure the lamp is properly instantiated when the song starts.
	 */
	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		resetLamp();
	}

	/**
	 * Make sure the lamp is reset when the song restarts.
	 */
	override function onSongRetry(event:ScriptEvent)
	{
		super.onSongRetry(event);

		// Properly reset lightning when restarting the song.
		nextLampIndex = 0;
		resetLamp();
	}
}