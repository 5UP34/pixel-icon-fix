import flixel.FlxG;
import funkin.Paths;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.character.SparrowCharacter;

class PicoBlazinCharacter extends SparrowCharacter
{
	function new()
	{
		super('pico-blazin');
	}

	function onCreate(event:ScriptEvent)
	{
		trace('CallSuperOnCreate');
		super.onCreate(event);

		// NOTE: this.x and this.y are not properly set here.

		GameOverSubState.musicSuffix = 'Pico';
		GameOverSubState.blueBallSuffix = '-Pico';
	}

	function onNoteHit(event:NoteScriptEvent)
	{
		holdTimer = 0;

		// Override the hit note animation.

		// Each note type is named from Pico's perspective (to keep myself sane).
		switch (event.note.data.noteKind)
		{
			case "weekend-1-punchlow":
				playPunchLowAnim();
			case "weekend-1-punchlowblocked":
				playPunchLowAnim();
			case "weekend-1-punchhigh":
				playPunchHighAnim();
			case "weekend-1-punchhighblocked":
				playPunchHighAnim();
			case "weekend-1-blockhigh":
				playBlockHitAnim();
			case "weekend-1-dodgelow":
				playDodgeAnim();
			case "weekend-1-fakeout":
				playFakeOutAnim();
			default:
				// super.onNoteHit(event);
		}
	}

	function onNoteMiss(event:NoteScriptEvent)
	{
		holdTimer = 0;

		// Override the hit note animation.
		switch (event.note.data.noteKind)
		{
			case "weekend-1-punchlow":
				playPunchLowAnim();
			case "weekend-1-punchlowblocked":
				playPunchLowAnim();
			case "weekend-1-punchhigh":
				playPunchHighAnim();
			case "weekend-1-punchhighblocked":
				playPunchHighAnim();
			case "weekend-1-blockhigh":
				playHitHighAnim();
			case "weekend-1-dodgelow":
				playHitLowAnim();
			case "weekend-1-fakeout":
				playFakeOutAnim();
			default:
				// super.onNoteMiss(event);
		}
	}

	function onNoteGhostMiss(event:GhostMissNoteScriptEvent)
	{
		playHitHighAnim();
		trace(getDarnell().characterId);
		getDarnell().scriptCall("playPunchHighAnim", []);
	}

	override function onAnimationFinished(name:String)
	{
		if (name == "fakeOut")
		{
			playLaughingAnim();
		}
		super.onAnimationFinished(name);
	}

	function getDarnell()
	{
		if (this.debug) return null;
		return PlayState.instance.currentStage.getDad();
	}

	function moveToBack()
	{
		if (this.debug) return;
		this.zIndex = 200;
		PlayState.instance.currentStage.refresh();
	}

	function moveToFront()
	{
		if (this.debug) return;
		this.zIndex = 300;
		PlayState.instance.currentStage.refresh();
	}

	// ANIMATIONS

	function playBeforeUppercutAnim()
	{
		this.playAnimation('beforeUppercut', true, true);
		moveToFront();
	}

	function playBlockHitAnim()
	{
		this.playAnimation('blockHit', true, true);
		moveToBack();
	}

	function playDodgeAnim()
	{
		this.playAnimation('dodge', true, true);
		moveToBack();
	}

	function playFakeOutAnim()
	{
		this.playAnimation('fakeOut', true, true);
		moveToFront();
	}

	function playHitHighAnim()
	{
		this.playAnimation('hitHigh', true, true);
		moveToBack();
	}

	function playHitLowAnim()
	{
		this.playAnimation('hitLow', true, true);
		moveToBack();
	}

	function playLaughingAnim()
	{
		this.playAnimation('laughing', true, true);
		moveToFront();
	}

	function playPunchHighAnim()
	{
		this.playAnimation('punchHigh', true, true);
		moveToFront();
	}

	function playPunchLowAnim()
	{
		this.playAnimation('punchLow', true, true);
		moveToFront();
	}

	function playSpinAnim()
	{
		this.playAnimation('spin', true, true);
		moveToBack();
	}

	function playUppercutAnim()
	{
		this.playAnimation('uppercut', true, true);
		moveToFront();
	}
}
