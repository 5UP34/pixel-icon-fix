import flixel.FlxG;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import funkin.Paths;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.graphics.shaders.OverlayBlend;
import openfl.filters.ShaderFilter;
import funkin.shaderslmfao.RuntimeRainShader;
import openfl.utils.Assets;

class PhillyStreetsStage extends Stage
{
	var rainShader:RuntimeRainShader = new RuntimeRainShader();

	function new()
	{
		super('phillyStreets');
	}

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		rainShader.puddleMap = Assets.getBitmapData(Paths.image("phillyStreets/puddle"));
		rainShader.scale = FlxG.height / 200; // adjust this value so that the rain looks nice
		rainShader.intensity = 0.5;

		// set the shader input
		rainShader.mask = frameBufferMan.getFrameBuffer("mask");

		FlxG.camera.setFilters([new ShaderFilter(rainShader)]);
	}

	override function buildStage()
	{
		super.buildStage();
	}

	override function onUpdate(event:UpdateScriptEvent)
	{
		super.onUpdate(event);
		rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
		rainShader.update(event.elapsed);
	}

	override function onFrameBufferCreate()
	{
		// craetes a frame buffer named "mask", the background color is black
		frameBufferMan.createFrameBuffer("mask", 0xFF000000);
	}

	override function addProp(prop:StageProp, ?name:String = null)
	{
		super.addProp(prop, name);
		if (name == "puddle")
		{
			// add the prop to the frame buffer, change its color to green
			frameBufferMan.addSpriteCopyTo("mask", prop, 0x00FF00);
		}
		else
		{
			// add the prop to the frame buffer, change its color to blue
			frameBufferMan.addSpriteCopyTo("mask", prop, 0x0000FF);
		}
	}

  override function addCharacter(character:BaseCharacter, charType:CharacterType)
	{
		super.addCharacter(character, charType);

		// add the character to the frame buffer, change its color to red
		frameBufferMan.addSpriteCopyTo("mask", character, 0xFF0000);
	}
}
