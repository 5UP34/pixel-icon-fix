import flixel.FlxG;
import flixel.FlxSprite;
import funkin.Conductor;
import funkin.Paths;

/**
 * A sprite which represents a spraycan flying through the air that Pico must shoot.
 */
class SpraycanSprite extends FlxSprite
{
	/**
	 * The position on screen that the spray can should start arcing at.
	 */
	public var startingPosition:FlxPoint;
	/**
	 * The Conductor time at which the spray can should reach the ending position.
	 */
	 public var startingTime:Float;
	/**
	 * The position on screen that the spray can should finish arcing at.
	 */
	public var endingPosition:FlxPoint;
	/**
	 * The Conductor time at which the spray can should reach the ending position.
	 */
	public var endingTime:Float;

	public var STATE_IDLE:Int = 0;
	public var STATE_KICKED:Int = 1;
	public var STATE_ARCING:Int = 2;
	public var STATE_SHOT:Int = 3;
	public var STATE_IMPACTED:Int = 4;

	public var currentState:Int = 0;

	public function new()
	{
		super();
		frames = Paths.getSparrowAtlas('Spraypaint_Can_Assets');
		antialiasing = true;

		// Stationary can
		animation.addByPrefix('idle', 'singular can', 24, true);
		// Can kicked upward, with smear
		animation.addByPrefix('kick', 'can kicked up', 24, false);
		// Can with lit fuse
		animation.addByPrefix('fire', 'can on fire', 24, true);
		// Can bouncing off Pico before exploding
		animation.addByPrefix('bounce', 'can bounce off head', 24, false);
		// Can that has been shot
		animation.addByPrefix('shot', 'can shot bend', 24, false);
	}

	public function setArcProperties(startPos:FlxPoint, startTime:Float, endPos:FlxPoint, endTime:Float)
	{
		startingPosition = startPos;
		startingTime = startTime;
		endingPosition = endPos;
		endingTime = endTime;
	}

	public function playOptional(name:String) {
		if (animation.curAnim == null || animation.curAnim.name == name) {
			animation.play(name);
		}
	}

	override function onUpdate(event:ScriptEvent) {
		switch(currentState) {
			case STATE_IDLE:
				playOptional('idle');
			case STATE_KICKED:
				playOptional('kick');
			case STATE_ARCING:
				playOptional('fire');
			case STATE_SHOT:
				playOptional('shot');
			case STATE_IMPACTED:
				playOptional('bounce');
		}		
	}
}
